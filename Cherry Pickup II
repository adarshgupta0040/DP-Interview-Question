Recursion:

class Solution:
    def f(self,i,j1,j2,a,m,n):
        if j1<0 or j1>=n or j2<0 or j2>=n:
            return float('-inf')
        if i==m-1:
            if j1==j2:
                return a[i][j1]
            else:
                return a[i][j1]+a[i][j2]
        #explore All paths
        maxi = float('-inf')
        for dj1 in range(-1,2):
            for dj2 in range(-1,2):
                value=0
                if j1==j2:
                    value=a[i][j1]
                else:
                    value=a[i][j1]+a[i][j2]
                value+=self.f(i+1,j1+dj1,j2+dj2,a,m,n)
                maxi=max(maxi,value)
        return maxi
    def cherryPickup(self, grid: List[List[int]]) -> int:
        m=len(grid)
        n=len(grid[0])
        return self.f(0,0,n-1,grid,m,n)
        
        
Memoisation : (3D DP)

class Solution:
    def f(self,i,j1,j2,a,m,n,dp):
        if j1<0 or j1>=n or j2<0 or j2>=n:
            return float('-inf')
        if i==m-1:
            if j1==j2:
                return a[i][j1]
            else:
                return a[i][j1]+a[i][j2]
        #explore All paths
        if dp[i][j1][j2]!=-1:
            return dp[i][j1][j2]
        maxi = float('-inf')
        for dj1 in range(-1,2):
            for dj2 in range(-1,2):
                if j1==j2:
                    value=a[i][j1]+self.f(i+1,j1+dj1,j2+dj2,a,m,n,dp)
                else:
                    value=a[i][j1]+a[i][j2]+self.f(i+1,j1+dj1,j2+dj2,a,m,n,dp)
                maxi=max(maxi,value)
        dp[i][j1][j2]=maxi
        return dp[i][j1][j2]
    def cherryPickup(self, grid: List[List[int]]) -> int:
        m=len(grid)
        n=len(grid[0])
        dp=[[ [-1 for col in range(n)] for col in range(n)] for row in range(m)]
        return self.f(0,0,n-1,grid,m,n,dp)
        
        
Tabulation :

def cherryPickup(self, grid: List[List[int]]) -> int:
        m,n=len(grid),len(grid[0])
        dp=[[ [0 for col in range(n)] for col in range(n)] for row in range(m)]   #dp[m][n][n]
        for j1 in range(n):
            for j2 in range(n):
                if j1==j2:
                    dp[m-1][j1][j2]=grid[m-1][j1]
                else:
                    dp[m-1][j1][j2]=grid[m-1][j1]+grid[m-1][j2]
        
        for i in range(m-2,-1,-1):
            for j1 in range(n):
                for j2 in range(n):
                    maxi = float('-inf')
                    for dj1 in range(-1,2):
                        for dj2 in range(-1,2):
                            if j1==j2:
                                value=grid[i][j1]
                            else:
                                value=grid[i][j1]+grid[i][j2]
                            if j1+dj1>=0 and j1+dj1<n and j2+dj2>=0 and j2+dj2<n:
                                value+=dp[i+1][j1+dj1][j2+dj2]
                            else:
                                value+=float('-inf')
                            maxi=max(maxi,value)
                    dp[i][j1][j2]=maxi
        return dp[0][0][-1]

