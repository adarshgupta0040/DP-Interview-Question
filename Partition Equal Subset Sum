class Solution:
    def subsetSumToK(self,n, k, arr):
        dp=[[0 for i in range(k+1)]for j in range(n)]
        for i in range(n):
            dp[i][0]= 1
        if arr[0]<=k:
            dp[0][arr[0]]=1
        for ind in range(1,n):
            for target in range(1,k+1):
                Nottake=dp[ind-1][target]
                take=0
                if target>=arr[ind]:
                    take=dp[ind-1][target-arr[ind]]
                dp[ind][target]=take or Nottake
        return dp[n-1][k]
    
    def canPartition(self, nums: List[int]) -> bool:
        totalsum=sum(nums)
        if totalsum%2 != 0:
            return False
        target=totalsum//2
        return self.subsetSumToK(len(nums),target,nums)
        
        
   #----------------------------------------------------------------------------------------
   
   
   class Solution:
    def subsetSumToK(self,n, k, arr):
        prev=[0]*(k+1)
        prev[0]=True
        if arr[0]<=k:
            prev[arr[0]]=True
        for ind in range(1,n):
            curr=[0]*(k+1)
            curr[0]=True
            for target in range(1,k+1):
                Nottake=prev[target]
                take=False
                if target>=arr[ind]:
                    take=prev[target-arr[ind]]
                curr[target]=take or Nottake
            prev=curr
        return prev[k]
        
    def canPartition(self, nums: List[int]) -> bool:
        totalsum=sum(nums)
        if totalsum%2 != 0:
            return False
        target=totalsum//2
        return self.subsetSumToK(len(nums),target,nums)
        
        
