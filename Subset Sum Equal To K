Recursion:

def f(ind,target,a):
    if target==0:
        return True
    if ind==0:
        return a[0]==target
    Nottake=f(ind-1,target,a)
    take=False
    if target>=a[ind]:
        take=f(ind-1,target-a[ind],a)
    return (take or Nottake)
    
        
def subsetSumToK(n, k, arr):
    return f(n-1,k,arr)
    
    
Memoisation:

def f(ind,target,a,dp):
    if target==0:
        return True
    if ind==0:
        return a[0]==target
    if dp[ind][target]!=-1:
        return dp[ind][target]
    Nottake=f(ind-1,target,a,dp)
    take=False
    if target>=a[ind]:
        take=f(ind-1,target-a[ind],a,dp)
    dp[ind][target]=take or Nottake
    return dp[ind][target]
    
def subsetSumToK(n, k, arr):
    dp=[[-1 for i in range(k+1)]for j in range(n)]
    return f(n-1,k,arr,dp)
    
    
Tabulation :

def subsetSumToK(n, k, arr):
    dp=[[0 for i in range(k+1)]for j in range(n)]
    for i in range(n):
        dp[i][0]= 1
    if arr[0]<=k:
        dp[0][arr[0]]=1
    for ind in range(1,n):
        for target in range(1,k+1):
            Nottake=dp[ind-1][target]
            take=0
            if target>=arr[ind]:
                take=dp[ind-1][target-arr[ind]]
            dp[ind][target]=take or Nottake
    return dp[n-1][k]
    
    
Space Optimisation :

def subsetSumToK(n, k, arr):
    dp=[[0 for i in range(k+1)]for j in range(n)]
    prev=[0]*(k+1)
    prev[0]=True
    if arr[0]<=k:
        prev[arr[0]]=True
    for ind in range(1,n):
        curr=[0]*(k+1)
        curr[0]=True
        for target in range(1,k+1):
            Nottake=prev[target]
            take=False
            if target>=arr[ind]:
                take=prev[target-arr[ind]]
            curr[target]=take or Nottake
        prev=curr
    return prev[k]
