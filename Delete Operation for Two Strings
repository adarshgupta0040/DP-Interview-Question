class Solution:
    def LCS(self, s: str, t: str):
        m=len(s)
        n=len(t)
        dp=[[0 for i in range(n+1)]for j in range(m+1)]
        for j in range(n+1):
            dp[0][j]=0
        for i in range(m+1):
            dp[i][0]=0
        for i in range(1,m+1):
            for j in range(1,n+1):
                if s[i-1]==t[j-1]:
                    dp[i][j]=1+dp[i-1][j-1]
                else:
                    dp[i][j]=max(dp[i][j-1],dp[i-1][j])
        return dp[m][n]
    
    def minDistance(self, word1: str, word2: str) -> int:
        n=len(word1)
        m=len(word2)
        # delete = n - self.LCS(word1,word2)
        # insert = m - self.LCS(word1,word2)
        return n+m- 2*self.LCS(word1,word2)
