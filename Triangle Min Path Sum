Memoization:

class Solution:
    def f(self,i,j,n,a,dp):
        if i==n-1:
            return a[i][j]
        if dp[i][j]!=-1:
            return dp[i][j]
        down=a[i][j]+self.f(i+1,j,n,a,dp)
        diagnol=a[i][j]+self.f(i+1,j+1,n,a,dp)
        dp[i][j]= min(down,diagnol)
        return dp[i][j]
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        n=len(triangle)
        dp=[[-1 for i in range(n)]for j in range(n)]
        return self.f(0,0,n,triangle,dp)
        

DP Tabulation : O(N*N)

def minimumTotal(self, triangle: List[List[int]]) -> int:
        n=len(triangle)
        dp=[[-1 for i in range(n)]for j in range(n)]
        for j in range(n):
            dp[n-1][j]=triangle[n-1][j]
        for i in range(n-2,-1,-1):
            for j in range(i,-1,-1):
                down=triangle[i][j]+dp[i+1][j]
                diagnol=triangle[i][j]+dp[i+1][j+1]
                dp[i][j]=min(down,diagnol)
        return dp[0][0]
        
        
Space Opimisation O(N):

class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        n=len(triangle)
        nxt=[0]*n
        for j in range(n):
            nxt[j]=triangle[n-1][j]
        for i in range(n-2,-1,-1):
            curr=[0]*n
            for j in range(i,-1,-1):
                down=triangle[i][j]+nxt[j]
                diagnol=triangle[i][j]+nxt[j+1]
                curr[j]=min(down,diagnol)
            nxt=curr
        return nxt[0]
