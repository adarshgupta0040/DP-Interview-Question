Recursive Apporoch: TLE
class Solution:
    def f(self,i,j):
        if i==0 and j==0:
            return 1
        if i<0 or j<0:
            return 0
        else:
            up=self.f(i-1,j)
            left=self.f(i,j-1)
            return left+up
    def uniquePaths(self, m: int, n: int) -> int:
        return self.f(m-1,n-1)
        
        
Memoization : Accepted

class Solution:
    def f(self,i,j,dp):
        if i==0 and j==0:
            return 1
        if i<0 or j<0:
            return 0
        if dp[i][j]!=-1:
            return dp[i][j]
        else:
            up=self.f(i-1,j,dp)
            left=self.f(i,j-1,dp)
            dp[i][j]=up+left
        return dp[i][j]
    def uniquePaths(self, m: int, n: int) -> int:
        dp=[[-1 for i in range(n)]for j in range(m)]
        return self.f(m-1,n-1,dp)
        
        
Tabulation (DP) : Accepted

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        dp=[[-1 for i in range(n)]for j in range(m)]
        for i in range(m):
            for j in range(n):
                if i==0 and j==0:
                    dp[0][0]=1
                else:
                    up,left=0,0
                    if i>0:
                        up=dp[i-1][j]
                    if j>0:
                        left=dp[i][j-1]
                    dp[i][j]=up+left
        return dp[m-1][n-1]
        
        
Space Optimisation : O(N) Accepted

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        prev=[0]*(n)
        for i in range(m):
            curr=[0]*n
            for j in range(n):
                if i==0 and j==0:
                    curr[j]=1
                else:
                    up,left=0,0
                    if i>0:
                        up=prev[j]
                    if j>0:
                        left=curr[j-1]
                    curr[j]=up+left
            prev=curr
        return prev[n-1]
