class Solution:
    def longestCommonSubsequence(self, s: str, t: str) -> int:
        m=len(s)
        n=len(t)
        dp=[[0 for i in range(n+1)]for j in range(m+1)]
        for j in range(n+1):
            dp[0][j]=0
        for i in range(m+1):
            dp[i][0]=0
        for i in range(1,m+1):
            for j in range(1,n+1):
                if s[i-1]==t[j-1]:
                    dp[i][j]=1+dp[i-1][j-1]
                else:
                    dp[i][j]=max(dp[i][j-1],dp[i-1][j])
        return dp[m][n]
        
       
       
#Space Optimisation :

class Solution:
    def longestCommonSubsequence(self, s: str, t: str) -> int:
        m=len(s)
        n=len(t)
        prev=[0]*(n+1)
        
        for j in range(n+1):
            prev[j]=0

        for i in range(1,m+1):
            curr=[0]*(n+1)
            for j in range(1,n+1):
                if s[i-1]==t[j-1]:
                    curr[j]=1+prev[j-1]
                else:
                    curr[j]=max(curr[j-1],prev[j])
            prev=curr
        return prev[n]
        
        
